<meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0">
<title>CT</title>
<table></table>

<script src=js/ts604.js></script>
<script>
//1-13-17 jchoy CmdTable
//1-31-17 jchoy v0.196 tsjs; doTxInput/midcate; addCmdMods/unshift; trim
//===
function CmdTable(){
  new SnAppFdn().inherit( this, SnLiteLoader );
  new SnAppFdn().inherit( this, Bic );
  this.ver= '0.196';
  var $t= this;
  this.cmdMods= [ {doCmd: function(at){
      if (at[0].toLowerCase()=='ver') return $t.ver;}} ];
  this.init= function(tbl){
    for (var m in this) tbl[m]= this[m];
    ($t=tbl).border = "1";
    tbl.style.borderCollapse= 'collapse';
    this.addEl('input',tbl.writeRow('$')).size=45;
    this._.onkeypress= function(){ tbl.doTxInput(this) };
    this._.parentNode.colSpan = [2,this._.focus()][0];
    new CmdMod01().addCmdMods( 'cmdmods.txt', $t );
    tmpfs.addEventListener( function(e){$t.onFsMod(e)}, 'FILEMOD' );
    new RunOnce().start( $t );
    return this;
  }
  this.onFsMod= function(evt){
    if (evt.message=='cmdmods.txt') new CmdMod01().addCmdMods('cmdmods.txt', $t);
  }
  this.writeRow= function(s){
    var cell, row= this.insertRow(this.rows.length?1:0);
    for (var i=0; i<arguments.length; i++)
      (cell= row.insertCell(i)).innerHTML= arguments[i];
    row.style.verticalAlign= 'top';
    return cell;
  }
  this.doTxInput= this.doCmd= function(){} //override this
}
//===
CmdMod01= function(cap){
  this.cap=cap;
  this.doCmd= function( at ){
    var at0= at[0].toUpperCase();
    if (at0 == 'LOADJS')
      return [this.cap.loadJs(at[1]), 'loading '+at[1]][1]; 
    if (at0 == 'EVAL') return (!tmpfs.exist(at[1]))? 'not found' :
        [eval(tmpfs.read(at[1])), at[1]][1];
  }
  this.addCmdMods= function( fn, cap ){
    tmpfs.log( 'log', 'addCmdMods' );
    for (var i=0,at= tmpfs.read(fn).split('\n'); i<at.length; i++)
      cap.cmdMods.unshift( new window[at[i]](cap) );
  }
}
//===
CmdMod02= function(){
  this.doCmd= function( at ){
    var at0= at[0].toUpperCase();
    if (at0 == 'CAT')
      return '<pre>'+tmpfs.read( at[1] )+'</pre>';
    if (at0 == 'WRITE'){
      var res= at.slice(2,99).join(' ')
      return [tmpfs.write(at[1], res), at[1]+' '+res.length][1];
    }
  }
}
//===
function TmpFs(){
  new SnAppFdn().inherit( this, EventCom );
  this.files= {};
  this.logGroups= {log:'log.txt', err:'err.txt', cmd:'cmdhist.txt'};
  this.getInst= function(){
    if (!window['tmpfs']) tmpfs= this;
    return [tmpfs,window.onerror= function(s){ tmpfs.log('err',s); }][0];
  }
  this.exist= function(fn){ return (this.files[fn])? true:false; }
  this.read= function(fn){ return this.files[fn]; }
  this.write= function(fn, val){  this.files[fn]= val;  this.alertMod(fn); }
  this.append= function(fn, val){ this.files[fn]+= val; this.alertMod(fn); }
  this.alertMod= function(fn){ this.alertEvent( 'FILEMOD', this, fn ) }
  this.trunc= function(){}
  this.log= function( grp, s ){
    for (var m in this.logGroups) if (grp==m) (function(fn,t){
        if (!t.exist(fn)) t.write(fn,'');
        t.append( fn, new Date().toLocaleString()+' '+s+'\n' );
        t.trunc(fn,10000); })( this.logGroups[m], this );
  }
}
//===
function EventCom(){
  this.listeners= {};
  this.alertEvent= function( evtName, tgt, msg ){
    var ls= (this.listeners[evtName])? this.listeners[evtName] :[];
    for (var i=0; i<ls.length; i++) ls[i]( {target:tgt, message:msg} );
  }
  this.removeEventListener= function( fcn, evtName ){
    var ls= (this.listeners[evtName])? this.listeners[evtName] :[];
    for (var i=0; i<ls.length; i++) if (fcn==ls[i]) ls.splice(i,1);
  }
  this.addEventListener= function( fcn, evtName ){
    if (!this.listeners[evtName]) this.listeners[evtName]=[];
    this.listeners[evtName].push(fcn);
  }
}
//===
RunOnce= function(){
  var $t= this;
  this.start= function(cap){
    this.cap= cap;
    tmpfs.addEventListener( function(e){$t.onFsMod(e)}, "FILEMOD" );
    var run= cap.cgi( "run", "", location );
    if (run) tmpfs.write( "runonce.txt", decodeURIComponent(run) ); else this.cook();
    return "setup done";
  }
  this.cook= function(){
    for (var ap,i=0,at= document.cookie.split(" ;"); i<at.length; i++)
      if (at[i].indexOf("runonce=")==0)
        tmpfs.write( "runonce.txt", decodeURIComponent(at[i].split("=")[1]) );
  }
  this.onFsMod= function(ev){
    if (ev.message !='runonce.txt') return;
    if (!tmpfs.exist(ev.message)) return;
    var at= tmpfs.read(ev.message).split("\n");
    for (var c=this.cap,i=0; i<at.length; i++) {
      tmpfs.log( "log", "runonce "+at[i] );
      c.igniteDiv( c.writeRow(at[i],c.doCmd(at[i])) );
    }
  }
}
//===
function Bic(){
  new SnAppFdn().inherit( this, SnAppFdn );
  this.midcate= function(s, l2){
    return (s.length>l2+l2)? [s.substr(0,l2),s.substr(-l2)].join(' ... ') : s;
  }
  this.igniteDiv= function( cell ){
    var ig, at= cell.getElementsByTagName("div");
    if ((at.length>0) && (ig= at[0].getAttribute("ignite")))
      this.ignite( at[0], window[ig] );
  }
  this.ignite= function( elOrTag, cls ){
    if (typeof(elOrTag)!=="string") return new cls().init(elOrTag);
    for (var i=0,at=this.gebtn(elOrTag); i<at.length; i++)
      this.ignite( at[i], cls );
  }
  this.gebtn= function(t){ return document.getElementsByTagName(t) }
}
//===
function Starter(){
  new SnAppFdn().inherit( this, Bic );
  this.start= function(){
    new TmpFs().getInst().log( 'log', 'start' );
    tmpfs.write( 'cmdmods.txt','CmdMod01\nCmdMod02' );
    this.ignite( "table", CmdTable );
  }
}
new Starter().start();
</script><script>
//========================these can be farmed out to local/remote files
function TmpFsExt(){
  this.start= function(){
    for (var m in this) tmpfs[m]= this[m];
  }
  this.del= function(fn){       delete(this.files[fn]); this.alertMod(fn); }
  this.list= function( sep ){
    var res=[];
    for (var m in this.files) res.push(m);
    return res.sort().join( sep );
  }
  this.trunc= function(fn, len){
    if ((!this.exist(fn)) || (this.files[fn].length<len)) return;
    this.files[fn]= this.files[fn].substr(this.files[fn].length-len);
  }
}
new TmpFsExt().start();
CmdMod03= function(cap){
  this.doCmd= function(at){
    var at0=at[0].toUpperCase();
    if (at0 == "TSJS") {
      if (!tmpfs.exist("ts.cfg")) return "missing ts.cfg";
      var u,c=JSON.parse(tmpfs.read("ts.cfg"));
      u=c.readverb.replace("{0}",at[1]);
      return ["load.."+at[1], cap.loadJs(c.urlbase+u)][0];
    }
  }
}
tmpfs.write("cmdmods.txt","CmdMod03");
CmdMod3a= function(cap){
  this.doCmd= function(at){}
  this.doTxInput= function(tx){
    if (event.keyCode != 13) return;
    var cell= this.writeRow( this.midcate(tx.value,10), this.doCmd(tx.value) );
    this.igniteDiv(cell, tx.value='');
  }
  this._doCmd= function( s ){
    tmpfs.log('cmd',s);
    for (var res,at=s.split(' '),i=0; i<this.cmdMods.length; i++)
      if (res= this.cmdMods[i].doCmd( at )) return res;
    return ("error: "+s).fontcolor("red");
  }
  cap.doTxInput= this.doTxInput;
  cap.doCmd= this._doCmd;
}
tmpfs.write("cmdmods.txt","CmdMod3a");
CmdMod04= function(cap){
  this.doCmd= function(at){
    var at0=at[0].toUpperCase();
    if (at0 == 'APPEND'){
      var pm= (at[2]=='/c')? ['',3] : ['\n',2];
      var res=  pm[0]+at.slice(pm[1],99).join(' ')
      return [tmpfs.append(at[1], res), at[1]+' '+res.length][1];
    }
    if (at0 == 'LS') return tmpfs.list(', '); 
  }
}
tmpfs.write("cmdmods.txt","CmdMod04");
CmdMod05= function(cap){
  this.doCmd= function(at){
    var at0=at[0].toUpperCase();
    if (at0 == 'LOCALTXT') return "<div ignite=LocalTxt />";
  }
}
tmpfs.write("cmdmods.txt","CmdMod05");
//===
function LocalTxt(){
  new SnAppFdn().inherit( this, SnAppFdn );
  var $t= this;
  this.init= function(el){
    for (var m in this) el[m]= this[m];
    this.addEl( 'input', el ).type= 'file';
    this._.onchange= function(){$t.useFile(this.files)};
    return this;
  }
  this.useFile= function(files){
    if (files.length==0) return;
    var fr= new FileReader();
    fr.onload= function(evt){ tmpfs.write(files[0].name, evt.target.result) }
    fr.readAsText(files[0]);
  }
}

//===2418
py={"group":"ts"
,"urlbase":"./"
,"readverb":"ts{0}.txt"
}
tmpfs.write("ts.cfg",JSON.stringify(py));
s="loadjs "+py.urlbase+py.readverb.replace("{0}","2417");
//tmpfs.write("runonce.txt",s);

//===2417
CmdMod06= function(cap){
  this.doCmd= function(at){
    var at0=at[0].toUpperCase();
    if (at0 == "COPY"){
      if (!tmpfs.exist(at[1])) return ("Not found: "+at[1]).fontcolor("red");
      if (tmpfs.exist(at[2])) return ("Failed to overwrite: "+at[2]).fontcolor("red");
      return [tmpfs.write(at[2], tmpfs.read(at[1])), at[2]][1];
    }
  }
}
tmpfs.write("cmdmods.txt","CmdMod06");
//tmpfs.write("runonce.txt","tsjs 2419");

//===2419
CmdMod9= function(cap){
  this.doCmd= function(at){
    var at0= at[0].toUpperCase();
    if (at0 == "RM"){
      return [(tmpfs.exist(at[1]))?"deleted":"not found",tmpfs.del(at[1])][0];
    }
  }
}
tmpfs.write("cmdmods.txt","CmdMod9");
//tmpfs.write("runonce.txt","tsjs 2421");
//===
CmdMod19= function(cap){
  this.doCmd= function(at){
    var at0= at[0].toUpperCase();
    if (at0 == 'HELP')
      return "<pre>"+tmpfs.read("help.txt" )+"</pre>";
  }
}
tmpfs.write("cmdmods.txt","CmdMod19");
tmpfs.write( "help.txt","ver - app version"
      +"\nlink [url] - create hyperlink"
      +"\nloadjs [url] - src js file"
      +"\nlocaljs, localtxt - file button to load file"
      +"\ncat, write, append, rm, ls, eval - file operations" );
tmpfs.write( "todo.txt","edit, clear, live, feed, serve. ls-col" );

//===2421
CmdMod7= function(cap){
  this.doCmd= function(at){
    var at0= at[0].toUpperCase();
    if (at0 == "LOCALJS") return "<div ignite=LocalJs />";
  }
}
//===
function LocalJs(){
  new SnAppFdn().inherit( this, LocalTxt);
  this.useFile= function(files){
    if (files.length==0) return;
    var fr= new FileReader();
    fr.onload= function(evt){ eval( evt.target.result ) }
    fr.readAsText(files[0]);
  }
}
tmpfs.write("cmdmods.txt","CmdMod7");
tmpfs.write("runonce.txt","tsjs 2420");

/*
//===2420
s="lslive$setcookie$CR$joinfiles";
tmpfs.write("ideas.txt",s.split("$").join(unescape("%0A")));

CmdMod08= function(cap){
  this.doCmd= function(at){
    if (at[0].toUpperCase()=="CLEAR") {
      while (cap.rows.length>1) cap.deleteRow(1);
      return "ok";
    }
  }
}
tmpfs.write("cmdmods.txt","CmdMod08");
tmpfs.write("runonce.txt","clear\nver\nlocaltxt");

//===
CmdMod20= function(cap){
  this.doCmd= function(at){
    var at0= at[0].toUpperCase();
    if (at0 == "LINK")
      return cap.midcate(at[1],15).link(at[1]);
  }
}
tmpfs.write("cmdmods.txt","CmdMod20");
*/
</script>
