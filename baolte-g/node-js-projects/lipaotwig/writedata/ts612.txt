//5-21-2016 jchoy v0.391 js612 SvgOverlay
//TODO: viewPort, gravity, proximity, spin, background parallax
//-----
SvgMotion= function(){
  new AppTool().inherit( this, AppTool );
  var $t= this;
  this.frameIntervalMs = 50;
  this.svgEls= [];
  this.start= function(width, height, color, canvasEl){
    if (!(this._=canvasEl)){
      this.addEl('canvas').width= width;
      this._.height= height;
    }
    this.pz= [ (this.canvas=this._).width, this._.height];
    this.bgColor = color;
    this.ctx = this._.getContext('2d');
    //window.requestAnimationFrame( function(){$t.repaint()} );
    setInterval( function(){$t.repaint()}, this.frameIntervalMs );
  }
  this.repaint= function(){
    this.ctx.fillStyle = this.bgColor;
    this.ctx.fillRect( 0, 0, $t.pz[0], $t.pz[1] );
    for (var se,i=0,at=this.svgEls; i<at.length; i++){
      se= at[i];
      if (se.isVisible)  this.ctx.drawImage(se.img, se.pos[0], se.pos[1]);
      at[i].pos[0] += at[i].vel[0];  //TODO: time
      at[i].pos[1] += at[i].vel[1];
    }
  }
  this.addItem= function(el){  this.svgEls.push(el); }
  this.getEventPos= function(evt) {
        var rect = this.canvas.getBoundingClientRect();
        return {  x: evt.clientX - rect.left, y: evt.clientY - rect.top };
  }
}
//-----
IconMaker= function(){
  this.size= {width:50, height:50};
  this.textColor= 'blue';
  this.mkIconImg= function( s, color ){
    var res, ctx, cnv= document.createElement('canvas');
    for (var m in this.size) cnv[m] = this.size[m];
    (ctx=cnv.getContext('2d')).fillStyle= color;
    ctx.translate(this.size.width/2,this.size.height/2);
    this.drawImg( ctx, s );
    (res=new Image()).src= cnv.toDataURL("image/png", 0.5);
    return res;
  }
  this.drawImg= function(ctx, s){
    ctx.arc(0,0,this.size.width/2,0,Math.PI*2,true);
    ctx.fill();
    ctx.textAlign='center';
    var imd= ctx.getImageData( this.size.width/2,2,2,2 );
    ctx.fillStyle= (imd.data[0]+imd.data[1]+imd.data[2] < 255)? "white" : "blue";
    ctx.scale( 3*this.size.width/50, 3*this.size.height/50 );
    ctx.fillText(s, 0, 4.5);
  }
}
//-----
SvgElOverlay= function(){
  this.overlayImgs= {};
  this.clients= [];
  this.addOverlay= function( name, img, x, y ){
    this.overlayImgs[name] = {img:img, x:x, y:y};
  }
  this.mkDot= function( color, size ){
    var imr= new IconMaker();
    imr.size= {width:size, height:size};
    return imr.mkIconImg( '', color );
  }
  this.applyOverlay= function( svgEl, name ){
    var res;
    for (var i=0, at=this.clients; i<at.length; i++){
      if (!at[i].obj.isVisible) at[i]= at.pop();
      if (at[i].obj==svgEl) res=at[i];
    }
    if (!res) this.clients.push( res={obj:svgEl, origImg:svgEl.img} );
    res.obj.img= this.mergeImg( res.origImg, this.overlayImgs[name] );
  }
  this.mergeImg= function( bsImg, overlay ){
    if (!overlay) return bsImg;
    var ctx, cnv = document.createElement('canvas');
    cnv.width= bsImg.width; cnv.height= bsImg.height;
    (ctx= cnv.getContext('2d')).drawImage( bsImg, 0, 0 );
    ctx.drawImage( overlay.img, overlay.x, overlay.y );
    (res=new Image()).src= cnv.toDataURL("image/png", 0.5);
    return res;
  }
}

js612=pkg={};
pkg.svgMotion= new SvgMotion();
pkg.iconMaker= new IconMaker();
pkg.svgMotion.exposeClassNames( pkg );


if (_n)_n();
